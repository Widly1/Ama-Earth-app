// updated server.js backend file, created using node.js
require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { GoogleGenerativeAI } = require("@google/generative-ai");

const app = express();
const port = 5001;

// can be found in google gemini API documents
const GOOGLE_API_KEY = process.env.My_GEMINI_API_KEY; // my google gemini api key (in the env file)
const genAI = new GoogleGenerativeAI(GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro-latest"});

// we use cors to allow access from different origins(different ports)
app.use(cors());
app.use(bodyParser.json());

// API Route to Generate Report
app.post('/generate-report', async (req, res) => {
  // our request is coming from the userInput 
  const { userInput } = req.body;

  if (!userInput) {
    return res.status(400).json({ error: 'User input is required' });
  }

  try {
    // generate content using Google Gemini
    const result = await model.generateContent(userInput);
    const responseText = result.response.text();
    // if we got a response, send it as JSON with "report" as the key  
    if (responseText) {
      res.json({ report: responseText });
    } // else send a 500 error
    else {
      res.status(500).json({ error: 'No text generated by Gemini' });
    }
  } catch (error) {
    console.error('Error generating report:', error.message);
    res.status(500).json({ error: 'Error generating report' });
  }
});

// start the server and make sure it's running with a log
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
